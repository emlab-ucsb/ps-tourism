# dispersal_distance_lim<-1000 #let us say a limit of 1000km as the dispersal distance range...realistic?
# distance_mat<-list()
# cores<-detectCores()
# registerDoParallel(cores-1)
# for (i in 1:n_pixel){ #calculate the distance of pixel i to all (except itself and no repetition, i.e., the half of the distance matrix)
#   distance <- sqrt((biol_data[i,1]-biol_data[i+1:n_pixel,1])^2+(biol_data[i,2]-biol_data[i+1:n_pixel,2])^2)/1000
#   position <- which(distance<=dispersal_distance_lim)
#
#   if (length(position)==0){next} #in case zero data
#
#   #save i,j,distance
#   prep_data<-as.data.frame(distance[position])
#   colnames(prep_data) <- "dist"
#   prep_data$pos1<-i
#   prep_data$pos2<-position+i
#
#   distance_mat[[i]] <- prep_data
# }
# distance_mat_merged <- do.call("rbind",distance_mat)
# stopImplicitCluster()
# head(distance_mat_merged)
# dim(distance_mat_merged)
# max(distance_mat_merged$pos1)
# max(distance_mat_merged$pos2)
# #save the data then load so we do not need to run the code above
# saveRDS(distance_mat_merged, file = "/Users/ren/Documents/GitHub/tourism-mpa/data/distance_mat_merged.rds")
distance_mat_merged <- readRDS(here("data","distance_mat_merged.rds"))
dim(distance_mat_merged)
head(distance_mat_merged)
#--Complete the distance matrix by adding in the self-loop and the other part of the mirror matrix
#--the second mirror half of the matrix
distance_mat_part2 <- distance_mat_merged %>% dplyr::select(dist,pos2,pos1)
colnames(distance_mat_part2) <- c("dist","pos1","pos2")
head(distance_mat_part2)
#--the link to itself
distance_mat_part3 <- data.frame(dist = rep(0,n_pixel)) %>% mutate(pos1 = 1:n_pixel, pos2 = 1:n_pixel)
head(distance_mat_part3)
#now, combine the three datasets to complete the matrix
distance_mat_full<-rbind(distance_mat_merged,distance_mat_part2,distance_mat_part3)
dim(distance_mat_full)
##--ADD a column indicating the proportion of biomass that will move at a specific site. Use a gaussian dispersal.
sigma <- 100 #this is a single value for now. Eventually, we will have species-specific parameter
#use group_by, remove the distance column
distance_mat_full_prop <- distance_mat_full %>% group_by(pos1) %>% mutate(biom_prop = exp(-( dist^2 / (2*(sigma^2))) ), biom_prop = biom_prop/sum(biom_prop)) %>% dplyr::select(-dist) %>% as.data.table()
head(distance_mat_full_prop) #fast!
#check if correct
distance_mat_full_prop %>% filter(pos1==1) %>% summarise(sum(biom_prop)) #ok good
#ok, now that we have the distance matrix, implement biomass diffusion and larval dispersal
head(biol_data)
biom <- biol_data %>% dplyr::select(pos1,B)
head(biom)
head(biol_data)
E <- biol_data$E #we can make this dynamic. i.e., as MPA size increases, E changes.
MPAcell <- biol_data$MPA
rK<-biol_data %>% dplyr::select(pos1,r,K) %>% as.data.table()
setkey(rK,pos1)
setkey(distance_mat_full_prop,pos1)
distance_mat_full_prK<-distance_mat_full_prop[rK]
#distance_mat_full_prKE<-merge(distance_mat_full_prop,rKE, all.x=TRUE)
head(distance_mat_full_prK)
##***CHUNK*** Derive B/K per pixel and E per pixel.
#K per stock
dim(KperStockCell)
rperStock_expand <- matrix(rep(MegaData$r_fin,each=120297),nrow=120297)
dim(rperStock_expand)
rperStockCell <- rperStock_expand*KperStockCell #r*K per cell
rperCell <- rowSums(rperStockCell)/rowSums(KperStockCell)
length(rperCell)
head(rperCell)
#plot r per cell
CleanCoordmegacell_EEZ_wMPA %>% select(lon, lat, MPA) %>% mutate(rperCell=rperCell) %>%
ggplot(aes(x=lon,y=lat,fill=rperCell)) + scale_fill_viridis_c(limits = c(0, max(rperCell))) + geom_raster()
#plot E per cell
plot(MegaData$Efin_BAU1_Ray,MegaData$ExploitationRate_BAU1_Ray) #ok the formula is ER=1-E
ERperStock_expand <- matrix(rep(MegaData$ExploitationRate_BAU1_Ray,each=120297),nrow=120297)
ERperStockCell <- ERperStock_expand*KperStockCell #r*K per cell
ERperCell <- rowSums(ERperStockCell)/rowSums(KperStockCell)
CleanCoordmegacell_EEZ_wMPA %>% select(lon, lat, MPA) %>% mutate(ERperCell=ERperCell) %>%
ggplot(aes(x=lon,y=lat,fill=ERperCell)) + scale_fill_viridis_c(limits = c(0, max(ERperCell))) + geom_raster()
###CHUNK
#implement the analytic solution. THIS SPEEDS UP THE COMPUTATION
#steps
#NOTE: This is not necessary!!!
#1. K per pixel per stock per cell. K density per pixel per stock should be constant.
Cleanmegacell<-readRDS(file = "/Users/ren/Documents/GitHub/FoodProvison_SupportFiles/Code Food Provision MPA/Cleanmegacell_mollweide.rds")
ncell<-dim(Cleanmegacell)[1]
kpercell_filter<-(Cleanmegacell>0)*1 #stock extent
#kperstock
MegaData <- readRDS(file = "/Users/ren/Documents/GitHub/FoodProvison_SupportFiles/Code Food Provision MPA/MegaData_Ray.rds")
kperstock <- MegaData$Kfin
head(kperstock)
#kpercellperstock. This distributes K spatially.
kpercell_denominator<-matrix(rep(colSums(kpercell_filter)/kperstock,each=ncell),nrow=ncell)
kpercell_expand<-kpercell_filter/kpercell_denominator
colSums(kpercell_expand) #ok, looks good. the same as kperstock
#plot k per cell
head(CleanCoordmegacell_EEZ_wMPA)
CleanCoordmegacell_EEZ_wMPA %>% select(lon, lat) %>% mutate(kpercell=rowSums(kpercell_expand)) %>%
ggplot(aes(x=lon,y=lat,fill=kpercell)) + scale_fill_viridis_c()+ geom_raster()
#2. r per stock
head(MegaData)
rperstock<-MegaData$r_fin
#compute bvk
#bvk_calculated <- MegaData %>% filter(INCLUDE==1) %>% summarise(bvk_calc = 1-(ExploitationRate_BAU1_Ray/r_fin))
bvk_calculated <- MegaData %>% summarise(bvk_calc = 1-(ExploitationRate_BAU1_Ray/r_fin))
head(bvk_calculated)
dim(bvk_calculated)
#3. B0vK #revisit this. Critical parameter
#BvKperStock_expand <- matrix(rep(MegaData$BK2012,each=120297),nrow=120297)
BvKperStock_expand <- matrix(rep(bvk_calculated$bvk_calc,each=120297),nrow=120297)
biomperStockCell <- BvKperStock_expand*kpercell_expand #r*K per cell
bvk_params <- BvKperStock_expand*(kpercell_expand>0) ##use this parameter
#this contains bvk per species per cell
#we do not actually need the bvk per cell. We just need a single value as it is constant per stock.
plot(bvk_params[,1])
dim(biomperStockCell)
head(biomperStockCell)
#print the first entry:
sum(biomperStockCell[,1])
plot(biomperStockCell[,1]) #ok, this is flat. good.
#Only include the stocks that are part of our analysis.
BvKperCell <- rowSums(biomperStockCell[,which(MegaData$INCLUDE==1)])/rowSums(kpercell_expand[,which(MegaData$INCLUDE==1)])
#plot average.
CleanCoordmegacell_EEZ_wMPA %>% dplyr::select(lon, lat, MPA) %>% #mutate(BvKperCell=BvKperCell) %>%
ggplot(aes(x=lon,y=lat,fill=BvKperCell)) + scale_fill_viridis_c(limits = c(0, 1)) + geom_raster()
#4. Assume all pixels allow fishing. Evaluate change in biomass at pixel i. Our assumption is conservative given that build-up of biomass only happens inside the MPA.
#Non-mpa positions
MPAcell <- biol_data$MPA
nonMPAposition<-which(MPAcell==0)
length(nonMPAposition)
length(MPAcell)
#--explore the connectivity matrix here
#--This is the base code for generating distance_mat_full_prop
head(distance_mat_full) #the columns are: dist, pos1, pos2 (pos1 is the source)
distance_mat_full_prop <- distance_mat_full %>% group_by(pos1) %>% mutate(biom_prop = exp(-( dist^2 / (2*(sigma^2))) ), biom_prop = biom_prop/sum(biom_prop)) %>% dplyr::select(-dist) %>% as.data.table()
head(distance_mat_full_prop) #fast!
#--check if correct
distance_mat_full_prop %>% group_by(pos1) %>% summarise(checksum=sum(biom_prop)) #ok, the answer is correct.
#--add evaluate MPA here
source(here("scripts","func_evaluateMPA.R"))
##--Run only once. Subsetting the connectivity matrix. Save inside a folder then call inside the function
#--subset the stock and get the row numbers where entry == 1, then subset the connectivit matrix
run_subset_connectivitymatrix <- 0 #1 for on, 0 to switch this off
#the code below can be optimized by running this in parallel.
if(run_subset_connectivitymatrix == 1){
registerDoParallel(detectCores()/2)
#CHECK IF THIS IS CORRECT: which(MegaData$INCLUDE==1)
foreach(stock_num=which(MegaData$INCLUDE==1)) %dopar% {
#for (stock_num in which(MegaData$INCLUDE==1)){
stock_subset_i<-which(Cleanmegacell[,stock_num] > 0) #that's K density map so the values are < 1
distance_mat_full_prop <- distance_mat_full %>% filter(pos1 %in% stock_subset_i, pos2 %in% stock_subset_i) %>% group_by(pos1) %>% mutate(biom_prop = exp(-( dist^2 / (2*(sigma^2))) ), biom_prop = biom_prop/sum(biom_prop)) %>% dplyr::select(-dist) %>% as.data.table()
#fts is the fastest in saving and loading files.
fst::write.fst(distance_mat_full_prop , here("data","connect_matrix",paste0(stock_num,"_connect.fst")))
}
doParallel::stopImplicitCluster()
}
test<-fst::read.fst(here("data","connect_matrix",paste0(1,"_connect.fst")))
head(test)
head(MegaData)
MegaData$bvk_fin<-bvk_calculated$bvk_calc
# #--test the code
# stock_num<-1
# bvk_equi <- func_evaluateMPA(stock_num, Cleanmegacell,biol_data,distance_mat_full,MegaData)
# head(bvk_equi)
# dim(bvk_equi)
# #--store the results and collate later
# collate_bvk_equi<-list()
# nstock<-2#dim(MegaData)[1]
# for (stock_num in 1:nstock){
#   collate_bvk_equi[[stock_num]] <- func_evaluateMPA(stock_num, Cleanmegacell,biol_data,distance_mat_full,MegaData)$bvk_equi
# }
# collate_bvk_equi_merged <- data.frame(do.call("cbind",collate_bvk_equi))
# colnames(collate_bvk_equi_merged)<-MegaData$stockid[1:nstock]
# head(collate_bvk_equi_merged)
# dim(collate_bvk_equi_merged)
# #ok, done testing. Now, do parallel compute
#--parallel compute
nstock<-dim(MegaData)[1]
ptm <- proc.time()
registerDoParallel(detectCores()/2)
stock_include<-which(MegaData$INCLUDE==1)[1:5]#c(1,3,5)#which(MegaData$INCLUDE==1)#c(1,3,5)#edit this. include only stocks for the analysis
#collate_bvk_equi_merged <- foreach(stock_num=stock_include[1:length(stock_include)], .combine='cbind') %dopar% {
collate_bvk_equi_merged <- foreach(stock_num=stock_include, .combine='cbind') %dopar% {
func_evaluateMPA(stock_num, Cleanmegacell,biol_data,distance_mat_full,MegaData)$bvk_equi
}
doParallel::stopImplicitCluster()
(proc.time() - ptm)/60 #check process time in minutes
colnames(collate_bvk_equi_merged)<-MegaData$stockid[stock_include]
head(collate_bvk_equi_merged)
dim(collate_bvk_equi_merged)
#plot
#collate_bvk_equi_merged[is.na(collate_bvk_equi_merged)] <- 0 #never do this.
collate_bvk_equi_merged[collate_bvk_equi_merged>1]<-1 #cap to 1
plotme<-rowMeans(collate_bvk_equi_merged,na.rm = TRUE)
plot(plotme)
plot(plotme,BvKperCell)
CleanCoordmegacell_EEZ_wMPA %>% ggplot(aes(x=lon,y=lat,fill=plotme)) + scale_fill_viridis_c(limits = c(0, max(plotme))) + geom_raster() #ok, great
#--to do
#calculation of tourism values can be incorporated in the function
# biomass_withMPA <- foreach(i=1:2, .combine='rbind') %dopar% {
#   EvaluateMPA <- MPAcell #this is inside since we need to close each pixel and put it back
#   EvaluateMPA[nonMPAposition[i]]<-1
#
#   # for (t in 1:20){
#   #   biom_diff <- distance_mat_full_prK[biom_diff] %>% mutate(Bdist=B*biom_prop, Growth=biom_prop*r*B) %>% group_by(pos2) %>% dplyr::select(pos2,Bdist,Growth) %>% summarize(B_add=sum(Bdist),G_add=sum(Growth)) %>%
#   #     mutate(B=((1-(E*(1-EvaluateMPA)))*B_add)+pmax(G_add*(1-(biom_diff$B/KperCell)),0)) %>% dplyr::rename(pos1 = pos2) %>% dplyr::select(pos1,B) %>% as.data.table()
#   # }
#   sum(biom_diff$B)
# }
# doParallel::stopImplicitCluster()
# (proc.time() - ptm)/60 #check process time in minutes
#
# plot(biomass_withMPA) #ok, looks good
#--parallel compute
nstock<-dim(MegaData)[1]
ptm <- proc.time()
registerDoParallel(detectCores()/2)
stock_include<-which(MegaData$INCLUDE==1)#c(1,3,5)#which(MegaData$INCLUDE==1)#c(1,3,5)#edit this. include only stocks for the analysis
#collate_bvk_equi_merged <- foreach(stock_num=stock_include[1:length(stock_include)], .combine='cbind') %dopar% {
collate_bvk_equi_merged <- foreach(stock_num=stock_include, .combine='cbind') %dopar% {
func_evaluateMPA(stock_num, Cleanmegacell,biol_data,distance_mat_full,MegaData)$bvk_equi
}
doParallel::stopImplicitCluster()
(proc.time() - ptm)/60 #check process time in minutes
colnames(collate_bvk_equi_merged)<-MegaData$stockid[stock_include]
head(collate_bvk_equi_merged)
dim(collate_bvk_equi_merged)
#plot
#collate_bvk_equi_merged[is.na(collate_bvk_equi_merged)] <- 0 #never do this.
collate_bvk_equi_merged[collate_bvk_equi_merged>1]<-1 #cap to 1
plotme<-rowMeans(collate_bvk_equi_merged,na.rm = TRUE)
plot(plotme)
plot(plotme,BvKperCell)
CleanCoordmegacell_EEZ_wMPA %>% ggplot(aes(x=lon,y=lat,fill=plotme)) + scale_fill_viridis_c(limits = c(0, max(plotme))) + geom_raster() #ok, great
#--to do
#calculation of tourism values can be incorporated in the function
# biomass_withMPA <- foreach(i=1:2, .combine='rbind') %dopar% {
#   EvaluateMPA <- MPAcell #this is inside since we need to close each pixel and put it back
#   EvaluateMPA[nonMPAposition[i]]<-1
#
#   # for (t in 1:20){
#   #   biom_diff <- distance_mat_full_prK[biom_diff] %>% mutate(Bdist=B*biom_prop, Growth=biom_prop*r*B) %>% group_by(pos2) %>% dplyr::select(pos2,Bdist,Growth) %>% summarize(B_add=sum(Bdist),G_add=sum(Growth)) %>%
#   #     mutate(B=((1-(E*(1-EvaluateMPA)))*B_add)+pmax(G_add*(1-(biom_diff$B/KperCell)),0)) %>% dplyr::rename(pos1 = pos2) %>% dplyr::select(pos1,B) %>% as.data.table()
#   # }
#   sum(biom_diff$B)
# }
# doParallel::stopImplicitCluster()
# (proc.time() - ptm)/60 #check process time in minutes
#
# plot(biomass_withMPA) #ok, looks good
library(raster)
library(sf)
library(tidyverse)
library(ggspatial)
install.packages("ggspatial")
gocp_project_dir <- "~/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/ocean-conservation-priorities"
emlab_data_dir <- "~/Volumes/Google Drive/Shared drives/emlab/data"
this_project_dir <- "~/Volumes/Google Drive/Shared drives/emlab/projects/current-projects/ps-tourism"
ocean_low_res_moll <- raster::raster(file.path(emlab_data_dir, "ocean-conservation-priorities", "inputs", "ocean_low_res_moll.tif"))
gocp_project_dir <- "~/Volumes/GoogleDrive/Shared \drives/emlab/projects/current-projects/ocean-conservation-priorities"
gocp_project_dir <- "~/Volumes/GoogleDrive/Shared\ drives/emlab/projects/current-projects/ocean-conservation-priorities"
ocean_low_res_moll <- raster::raster(file.path(emlab_data_dir, "ocean-conservation-priorities", "inputs", "ocean_low_res_moll.tif"))
emlab_data_dir <- "~/Volumes/Google Drive/Shared\ drives/emlab/data"
ocean_low_res_moll <- raster::raster(file.path(emlab_data_dir, "ocean-conservation-priorities", "inputs", "ocean_low_res_moll.tif"))
file.path(emlab_data_dir, "ocean-conservation-priorities", "inputs", "ocean_low_res_moll.tif")
emlab_data_dir <- "/Volumes/Google Drive/Shared\ drives/emlab/data"
file.path(emlab_data_dir, "ocean-conservation-priorities", "inputs", "ocean_low_res_moll.tif")
file.exists("/Volumes/Google Drive/Shared drives/emlab/data/ocean-conservation-priorities/inputs/ocean_low_res_moll.tif")
emlab_data_dir <- "/Volumes/Google Drive/Shared drives/emlab/data"
file.exists("/Volumes/Google Drive/Shared drives/emlab/data/ocean-conservation-priorities/inputs/ocean_low_res_moll.tif")
file.exists("/Volumes/GoogleDrive/Shared\ drives/emlab/data/ocean-conservation-priorities/inputs/ocean_low_res_moll.tif ")
file.exists("/Volumes/GoogleDrive/Shared drives/emlab/data/ocean-conservation-priorities/inputs/ocean_low_res_moll.tif ")
file.exists("~/GoogleDrive/Shared drives/emlab/data/ocean-conservation-priorities/inputs/ocean_low_res_moll.tif ")
dir.exists("/Volumes/GoogleDrive/Shared drives/emlab/data/ocean-conservation-priorities/inputs")
file.exists("/Volumes/GoogleDrive/Shared drives/emlab/data/ocean-conservation-priorities/inputs/ocean_low_res_moll.tif")
gocp_project_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/ocean-conservation-priorities"
# Path to the emLab data directory
emlab_data_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/data"
# Path to the Pristine Seas tourism directory on the emLab Google Drive
this_project_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/ps-tourism"
ocean_low_res_moll <- raster::raster(file.path(emlab_data_dir, "ocean-conservation-priorities", "inputs", "ocean_low_res_moll.tif"))
mpatlas <- sf::st_read(file.path(emlab_data_dir, "mpa-atlas", "MPAtlas_20201223_clean", "mpatlas_20201223_clean.shp"))
mpatlas_info <- mpatlas %>%
st_drop_geometry()
mpas_to_include <- c(15907, 14985, 14982, 12864, 9234, 737, 9051, 68813326,
68807894, 68819490, 15624, 68819076, 68818813, 68808197)
mpas_to_exclude <- c(68808626, 68808627)
highly_mpas <- mpatlas %>%
filter(is_mpa == 1,
status == "Designated",
implemente == 1) %>%
filter(!mpa_id %in% mpas_to_exclude) %>%
filter(no_take %in% c("All") | mpa_id %in% mpas_to_include | country == "GAB")
mpas_for_review <- mpatlas %>%
filter(is_mpa == 1,
status == "Designated",
implemente == 1) %>%
filter(!mpa_id %in% mpas_to_exclude) %>%
filter(no_take %in% c("All", "Part") | mpa_id %in% mpas_to_include) %>%
filter(!mpa_id %in% highly_mpas$mpa_id, iucn_categ %in% c("II", "Ia", "Ib")) %>%
arrange(desc(rep_m_area))
highly_mpas <- bind_rows(highly_mpas, mpas_for_review) %>%
st_set_crs(st_crs(mpatlas))
ocean_df <- stack(ocean_low_res_moll, highly_mpas_raster) %>%
raster::as.data.frame(xy = T) %>%
set_names(c("lon", "lat", "ocean", "f_highly_mpa")) %>%
filter(!is.na(ocean)) %>%
rowid_to_column(var = "cell_id") %>%
as_tibble()
highly_mpas_info <- highly_mpas %>% st_drop_geometry()
highly_mpas_raster <- highly_mpas %>%
st_transform(st_crs(ocean_low_res_moll)) %>%
rasterize(ocean_low_res_moll, getCover = T) %>%
mask(ocean_low_res_moll)
ocean_df <- stack(ocean_low_res_moll, highly_mpas_raster) %>%
raster::as.data.frame(xy = T) %>%
set_names(c("lon", "lat", "ocean", "f_highly_mpa")) %>%
filter(!is.na(ocean)) %>%
rowid_to_column(var = "cell_id") %>%
as_tibble()
spp_files <- tibble(filepath = list.files(c(file.path(gocp_project_dir, "data", "02_processed", "species_distributions", "birdlife"),
file.path(gocp_project_dir, "data", "02_processed", "species_distributions", "aquamaps")),
full.names = T),
valid_sci_name = str_replace_all(str_remove(basename(filepath), "\\.tif"), "_", " ")) %>%
arrange(valid_sci_name)
smts_info <- tibble(filepath = list.files(file.path(gocp_project_dir, "data", "02_processed","seamounts"), full.names = T))
provs_info <- tibble(filepath = list.files(file.path(gocp_project_dir, "data", "02_processed", "biogeography"), full.names = T, pattern = "\\.tif"))
biodiversity_df <- stack(c(spp_files$filepath, smts_info$filepath, provs_info$filepath))
biodiversity_df <- biodiversity_df %>%
raster::as.data.frame(xy = T)
biodiversity_df <- biodiversity_df %>%
rename("lon" = "x", "lat" = "y") %>%
inner_join(ocean_df %>%
select(lon, lat, cell_id)) %>%
select(lon, lat, cell_id, everything()) %>%
as_tibble()
bio_feature_names <- colnames(biodiversity_df)[-c(1:3)]
spp_wts <- data.table::fread(file.path(gocp_project_dir, "data", "02_processed", "species_list", "spp_weights.csv")) %>%
as_tibble() %>%
rename(w = spp_weight)
smts_wts <- tibble(filepath = list.files(file.path(gocp_project_dir, "data", "02_processed","seamounts"), full.names = T)) %>%
mutate(w = sum(spp_wts$w)/n())
provs_wts <- tibble(filepath = list.files(file.path(gocp_project_dir, "data", "02_processed", "biogeography"), full.names = T, pattern = "\\.tif")) %>%
mutate(w = sum(spp_wts$w)/n())
bio_features_info <- bind_rows(spp_wts %>%
mutate(sub_goal = "species"),
smts_wts %>%
mutate(sub_goal = "seamounts"),
provs_wts %>%
mutate(sub_goal = "provinces"))
n_bio_features <- nrow(bio_features_info)
features_matrix <- biodiversity_df %>%
select(-lon,-lat,-cell_id) %>%
as.matrix()
rownames(features_matrix) <- biodiversity_df$cell_id
stopifnot(
sum(map_lgl(biodiversity_df %>%
select(-lon,-lat,-cell_id), is.numeric)) == ncol(features_matrix)
)
norm_features_matrix <- sweep(features_matrix, 2, colSums(features_matrix, na.rm = T), FUN = "/")
stopifnot(
sum(colSums(norm_features_matrix, na.rm = T)) == ncol(features_matrix)
)
norm_features_matrix <- norm_features_matrix[rowSums(is.na(norm_features_matrix)) != ncol(norm_features_matrix), ]
stopifnot(
identical(colnames(norm_features_matrix),
biodiversity_df %>%
select(-lon,-lat,-cell_id) %>%
colnames())
)  # Is the order of the features mantained?
norm_features_matrix[is.na(norm_features_matrix)] <- 0
z_bio <- 0.25
bio_weights <- bio_features_info$w
bio_abatable_impacts_df <- raster(file.path(gocp_project_dir,
"data", "02_processed", "impacts", "chi", "abatable_impacts_5_yr_avg_log.tif")) %>%
raster::as.data.frame(xy = T) %>%
set_names(c("lon", "lat", "Ia")) %>%
inner_join(ocean_df) %>%
as_tibble() %>%
replace_na(list(Ia = 0))
bio_unabatable_impacts_df <- raster(file.path(gocp_project_dir,
"data", "02_processed", "impacts", "chi", "unabatable_impacts_5_yr_avg_log.tif")) %>%
raster::as.data.frame(xy = T) %>%
set_names(c("lon", "lat", "Iu")) %>%
inner_join(ocean_df) %>%
as_tibble()%>%
replace_na(list(Iu = 0))
v_out_matrix <- norm_features_matrix %>%
sweep(1, (1 - bio_abatable_impacts_df$Ia), FUN = "*") %>%
sweep(1, (1 - bio_unabatable_impacts_df$Iu), FUN = "*")
v_in_matrix <- norm_features_matrix %>%
sweep(1, (1 - bio_unabatable_impacts_df$Iu), FUN = "*")
v_diff_matrix <- norm_features_matrix %>%
sweep(1, (bio_abatable_impacts_df$Ia - bio_abatable_impacts_df$Ia*bio_unabatable_impacts_df$Iu), FUN = "*")
v_bau_per_species <- v_out_matrix %>%
colSums(na.rm = T)
mean(v_bau_per_species)
mean(v_bau_per_species^z_bio)
bau_benefit <- sum(bio_weights*v_bau_per_species^z_bio)
bau_benefit/sum(bio_weights*1^z_bio)
v_full_mpa_per_species <- v_in_matrix %>%
colSums(na.rm = T)
mean(v_full_mpa_per_species)
mean(v_full_mpa_per_species^z_bio)
max_benefit <- sum(bio_weights*v_full_mpa_per_species^z_bio)
max_benefit/sum(bio_weights*1^z_bio)
v_diff_per_species <- v_diff_matrix %>%
colSums(na.rm = T)
all.equal(v_full_mpa_per_species - v_diff_per_species, v_bau_per_species)
mean(v_diff_per_species) #  26% increase in suitable habitat remaining
total_benefit_diff <- sum(bio_weights*v_full_mpa_per_species^z_bio) - sum(bio_weights*v_bau_per_species^z_bio)
total_benefit_diff/sum(bio_weights*v_bau_per_species^z_bio) # a max of 41% increase in spp permanence
save(ocean_df, highly_mpas, highly_mpas_raster,
biodiversity_df, bio_features_info, n_bio_features, bio_feature_names, norm_features_matrix, bio_weights,
v_in_matrix, v_out_matrix, v_diff_matrix, v_bau_per_species, v_full_mpa_per_species,
bau_benefit, max_benefit,total_benefit_diff,
file = file.path(this_project_dir,  "data", "02_processed_data", "bio_model_input.RData"))
save(ocean_df, highly_mpas, highly_mpas_raster,
biodiversity_df, bio_features_info, n_bio_features, bio_feature_names, norm_features_matrix, bio_weights,
v_in_matrix, v_out_matrix, v_diff_matrix, v_bau_per_species, v_full_mpa_per_species,
bau_benefit, max_benefit,total_benefit_diff,
file = file.path(this_project_dir,  "data", "02-processed-data", "bio_model_input.RData"))
this_project_dir
save(ocean_df, highly_mpas, highly_mpas_raster,
biodiversity_df, bio_features_info, n_bio_features, bio_feature_names, norm_features_matrix, bio_weights,
v_in_matrix, v_out_matrix, v_diff_matrix, v_bau_per_species, v_full_mpa_per_species,
bau_benefit, max_benefit,total_benefit_diff,
file = file.path(this_project_dir,  "data", "02-processed-data", "bio_model_input.RData"))
save(v_out_matrix, v_in_matrix, bio_weights, bau_benefit, total_benefit_diff,
file =  file.path(this_project_dir,  "data", "02_processed_data", "minimal_bio_model_input.RData"))
save(v_out_matrix, v_in_matrix, bio_weights, bau_benefit, total_benefit_diff,
file =  file.path(this_project_dir,  "data", "02-processed-data", "minimal_bio_model_input.RData"))
here::here()
here::here("scripts", "functions")
z_bio <- 0.25
library(raster)
library(sf)
library(tidyverse)
library(ggspatial)
emlab_data_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/data"
# Path to the Pristine Seas tourism directory on the emLab Google Drive
this_project_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/ps-tourism"
sapply(list.files(
pattern = "[.]R$",
path = here::here("scripts", "functions"),
full.names = TRUE
),
source)
load(file = file.path(this_project_dir,  "data", "02_processed_data", "minimal_bio_model_input.RData"))
load(file = file.path(this_project_dir,  "data", "02-processed-data", "minimal_bio_model_input.RData"))
is_mpa_vect <- ocean_df$f_highly_mpa > 0.5 # select pixels that are at least 50% highly protected
protected_cell_ids <- ocean_df$cell_id[is_mpa_vect]
protected_cells <- matrix(is_mpa_vect,
nrow = 1,
ncol = length(is_mpa_vect))
library(raster)
library(sf)
library(tidyverse)
library(ggspatial)
### NOTE - you may have to adjust these paths depending on where your computer has mounted the Google Drive files
# Path to the emLab data directory
emlab_data_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/data"
# Path to the Pristine Seas tourism directory on the emLab Google Drive
this_project_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/ps-tourism"
### -----------------------------------------------------------
### Section 2 - Source functions and load input data ----------
### -----------------------------------------------------------
# Source functions
sapply(list.files(
pattern = "[.]R$",
path = here::here("scripts", "functions"),
full.names = TRUE
),
source)
# Load data files necessary for biodiversity model
load(file = file.path(this_project_dir,  "data", "02-processed-data", "bio_model_input.RData"))
z_bio <- 0.25
sum_v_outs <- v_out_matrix[!protected_cells, ] %>%
colSums(na.rm = T)
sum_v_in <- v_in_matrix[protected_cells, ]%>%
colSums(na.rm = T)
b_benefit <- sum(bio_weights*(sum_v_in + sum_v_outs)^z_bio)
(b_benefit - bau_benefit)/total_benefit_diff # Can be interpreted as a conservative measure of the benefit of today's MPAs
z_bio <- 0.25
is_mpa_vect <- ocean_df$f_highly_mpa > 0.5 # select pixels that are at least 50% highly protected
protected_cell_ids <- ocean_df$cell_id[is_mpa_vect]
protected_cells <- matrix(is_mpa_vect,
nrow = 1,
ncol = length(is_mpa_vect))
sum_v_outs <- v_out_matrix[!protected_cells, ] %>%
colSums(na.rm = T)
sum_v_in <- v_in_matrix[protected_cells, ]%>%
colSums(na.rm = T)
b_benefit <- sum(bio_weights*(sum_v_in + sum_v_outs)^z_bio)
(b_benefit - bau_benefit)/total_benefit_diff #Can be interpreted as a conservative measure of the benefit of today's MPA
calculate_relative_bio_benefit(is_mpa_vect = is_mpa_vect,
v_out_matrix =  v_out_matrix,
v_in_matrix = v_in_matrix,
weights  = bio_weights,
z_bio = z_bio,
bau_benefit = bau_benefit,
total_benefit_diff = total_benefit_diff)
is_mpa_vect_all <- is_mpa_vect[is_mpa_vect==F] = T
is_mpa_vect_all <- is_mpa_vect
is_mpa_vect_all[is_mpa_vect_all==F] = T
calculate_relative_bio_benefit(is_mpa_vect = is_mpa_vect_all,
v_out_matrix =  v_out_matrix,
v_in_matrix = v_in_matrix,
weights  = bio_weights,
z_bio = z_bio,
bau_benefit = bau_benefit,
total_benefit_diff = total_benefit_diff)
