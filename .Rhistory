#compare this with my ocean matrix
CleanCoordmegacell<-readRDS(here("data","CleanCoordmegacell_mollweide.rds"))
dim(CleanCoordmegacell)
### -----------------------------------------------------------
#
# Master script to run the Pristine Seas tourism model
# This script is just a sample - Currently it operates the biodiversity model, but placeholders for the other relevant parts are included and this script could be expanded.
#
### -----------------------------------------------------------
### --------------------------------------------------------
### Section 1 - Load packages and set directories ----------
### --------------------------------------------------------
library(raster)
library(sf)
library(tidyverse)
library(ggspatial)
### NOTE - you may have to adjust these paths depending on where your computer has mounted the Google Drive files
# Path to the emLab data directory
emlab_data_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/data"
# Path to the Pristine Seas tourism directory on the emLab Google Drive
this_project_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/ps-tourism"
### -----------------------------------------------------------
### Section 2 - Source functions and load input data ----------
### -----------------------------------------------------------
# Source functions
sapply(list.files(
pattern = "[.]R$",
path = here::here("scripts", "functions"),
full.names = TRUE
),
source)
# Load data files necessary for biodiversity model
load(file = file.path(this_project_dir,  "data", "02-processed-data", "bio_model_input.RData"))
# I will add other data files here including the P0 raster and the Q0 raster
head(ocean_df)
#compare this with my ocean matrix
CleanCoordmegacell<-readRDS(here("data","CleanCoordmegacell_mollweide.rds"))
dim(CleanCoordmegacell)
library(here)
CleanCoordmegacell<-readRDS(here("data","CleanCoordmegacell_mollweide.rds"))
dim(CleanCoordmegacell)
dim(ocean_df)
head(CleanCoordmegacell)
CleanCoordmegacell %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster() #ok, great
head(ocean_df)
ocean_df<-ocean_df %>% filter(ocean==1)
dim(ocean_df)
### -----------------------------------------------------------
#
# Master script to run the Pristine Seas tourism model
# This script is just a sample - Currently it operates the biodiversity model, but placeholders for the other relevant parts are included and this script could be expanded.
#
### -----------------------------------------------------------
### --------------------------------------------------------
### Section 1 - Load packages and set directories ----------
### --------------------------------------------------------
library(raster)
library(sf)
library(tidyverse)
library(ggspatial)
library(here)
### NOTE - you may have to adjust these paths depending on where your computer has mounted the Google Drive files
# Path to the emLab data directory
emlab_data_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/data"
# Path to the Pristine Seas tourism directory on the emLab Google Drive
this_project_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/ps-tourism"
### -----------------------------------------------------------
### Section 2 - Source functions and load input data ----------
### -----------------------------------------------------------
# Source functions
sapply(list.files(
pattern = "[.]R$",
path = here::here("scripts", "functions"),
full.names = TRUE
),
source)
# Load data files necessary for biodiversity model
load(file = file.path(this_project_dir,  "data", "02-processed-data", "bio_model_input.RData"))
# I will add other data files here including the P0 raster and the Q0 raster
head(ocean_df)
dim(ocean_df)
ocean_df2<-ocean_df %>% filter(ocean==1)
dim(ocean_df2)
ocean_df2 %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster() #ok, great
head(CleanCoordmegacell)
CleanCoordmegacell$ren_coord<-1
testme <- left_join(ocean_df, CleanCoordmegacell, by=c(lon,lat))
head(ocean_df)
testme <- left_join(ocean_df, CleanCoordmegacell, by=c("lon","lat"))
head(testme)
dim(testme)
plot(testme$ren_coord)
View(testme)
View(CleanCoordmegacell)
ocean_df2 %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster() #ok, great
### -----------------------------------------------------------
#
# Master script to run the Pristine Seas tourism model
# This script is just a sample - Currently it operates the biodiversity model, but placeholders for the other relevant parts are included and this script could be expanded.
#
### -----------------------------------------------------------
### --------------------------------------------------------
### Section 1 - Load packages and set directories ----------
### --------------------------------------------------------
library(raster)
library(sf)
library(tidyverse)
library(ggspatial)
library(here)
### NOTE - you may have to adjust these paths depending on where your computer has mounted the Google Drive files
# Path to the emLab data directory
emlab_data_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/data"
# Path to the Pristine Seas tourism directory on the emLab Google Drive
this_project_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/ps-tourism"
### -----------------------------------------------------------
### Section 2 - Source functions and load input data ----------
### -----------------------------------------------------------
# Source functions
sapply(list.files(
pattern = "[.]R$",
path = here::here("scripts", "functions"),
full.names = TRUE
),
source)
# Load data files necessary for biodiversity model
load(file = file.path(this_project_dir,  "data", "02-processed-data", "bio_model_input.RData"))
head(bio_features_info)
head(highly_mpas)
View(highly_mpas_raster)
head(highly_mpas_raster)
head(ocean_df)
plot(ocean_df$f_highly_mpa)
plot(ocean_df$ocean)
View(v_diff_matrix)
knitr::opts_chunk$set(fig.width = 6, fig.height = 4, fig.path = 'figs/',message = FALSE, warning = FALSE)
library(tidyverse)
library(raster)
library(doParallel)
library(parallel)
library(foreach)
library(bigstatsr)
library(igraph)
library(tictoc)
emLab_shrd_data_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/data"
emLab_project_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/mpa-fish-flows"
ocean <- raster(file.path(emLab_project_dir, "data", "02_processed", "masks", "ocean.tif"))
ocean_dist_matrix <- big_attach("/Volumes/GoogleDrive/Shared drives/emlab/data/ocean-distance-matrix/dist_matrix_65162.rds")
distibute_biomass(sigma = 10000*80, pixel_id  = 50, roi_raster = ocean, distance_raster = ocean_dist_matrix) %>%
plot()
dim(ocean_dist_matrix)
#generate stock distributions/geographic range in mollweide and compatible with Juan's coordinate system
#load stocks here
# #source of the function
# source("/Users/ren/Documents/GitHub/MPAFishFlow/ConvertMollweide.R")
#
# MollweideFile<-ConvertMollweide(EEZ_coord,CleanCoordmegacell) #using the ConvertMollweide function here
##THIS IS THE CODE FOR GENERATING THE EEZ SHAPEFILE. Important.
gc()
rm(list = ls())
library(raster)
library(sf)
library(tidyverse)
library(patchwork)
#library(janitor)
eez_shp<-readRDS(file = "/Users/ren/Documents/GitHub/FoodProvison_SupportFiles/Code Food Provision MPA/ConvertEEZmollweide/eez_shp_processed.rds")
# #direct way to convert eez_shp?
eez_shp2 <- tibble::rowid_to_column(eez_shp, "My_ID")
#
#this maps ID to country names. note that st_drop_geometry() drops the geometry
country_name_library <- eez_shp2 %>% st_drop_geometry() %>% select(My_ID, territory1,iso_ter1,sovereign1,iso_sov1)
names(country_name_library)[1] <- "CountryCode"
head(country_name_library)
ext <- extent(eez_shp2)
r <- raster(ext, res=50000)
r2 <- rasterize(eez_shp2, r, field="My_ID")
#
eezccoord <- rasterToPoints(r2, spatial = TRUE)
eezccoord2 <- as.data.frame(eezccoord)
head(eezccoord2) #these are coordinates
dim(eezccoord2)
#
colnames(eezccoord2)<-c("CountryCode","lon","lat")
max(eezccoord2$lon)
max(eezccoord2$lat)
#
# #check for uniqueness of the entries
dim(unique(eezccoord2[c("lon", "lat")])) #ok, all unique
#
# #Plot US
eezccoord2 %>% dplyr::filter(CountryCode==113) %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
eezccoord2 %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
head(eezccoord2)
#generate stock distributions/geographic range in mollweide and compatible with Juan's coordinate system
#load stocks here
# #source of the function
# source("/Users/ren/Documents/GitHub/MPAFishFlow/ConvertMollweide.R")
#
# MollweideFile<-ConvertMollweide(EEZ_coord,CleanCoordmegacell) #using the ConvertMollweide function here
##THIS IS THE CODE FOR GENERATING THE EEZ SHAPEFILE. Important.
gc()
rm(list = ls())
library(raster)
library(sf)
library(tidyverse)
library(patchwork)
#library(janitor)
eez_shp<-readRDS(file = "/Users/ren/Documents/GitHub/FoodProvison_SupportFiles/Code Food Provision MPA/ConvertEEZmollweide/eez_shp_processed.rds")
# #direct way to convert eez_shp?
eez_shp2 <- tibble::rowid_to_column(eez_shp, "My_ID")
#
#this maps ID to country names. note that st_drop_geometry() drops the geometry
country_name_library <- eez_shp2 %>% st_drop_geometry() %>% select(My_ID, territory1,iso_ter1,sovereign1,iso_sov1)
names(country_name_library)[1] <- "CountryCode"
head(country_name_library)
ext <- extent(eez_shp2)
r <- raster(ext, res=50000)
r2 <- rasterize(eez_shp2, r, field="My_ID")
#
eezccoord <- rasterToPoints(r2, spatial = TRUE)
eezccoord2 <- as.data.frame(eezccoord)
head(eezccoord2) #these are coordinates
dim(eezccoord2)
#
colnames(eezccoord2)<-c("CountryCode","lon","lat")
max(eezccoord2$lon)
max(eezccoord2$lat)
#
# #check for uniqueness of the entries
dim(unique(eezccoord2[c("lon", "lat")])) #ok, all unique
#
# #Plot US
eezccoord2 %>% dplyr::filter(CountryCode==113) %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
#
# #Plot World
eezccoord2 %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
#
head(eezccoord2)
# #the problem here is that even the land have coordinates
#
# #now, intersect with our known coordinates
CleanCoordmegacell<-readRDS(file = "/Users/ren/Documents/GitHub/FoodProvison_SupportFiles/Code Food Provision MPA/CleanCoordmegacell_mollweide.rds")
head(CleanCoordmegacell)
max(CleanCoordmegacell$lon)
max(CleanCoordmegacell$lat)
dim(CleanCoordmegacell)
CleanCoordmegacell %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
#
EEZ_partition<-left_join(CleanCoordmegacell,eezccoord2,by=c("lon","lat"))
head(EEZ_partition)
source("/Users/ren/Documents/GitHub/MPAFishFlow/ConvertMollweide.R")
Final_EEZ_file<-AlignCoordinates(eezccoord2,CleanCoordmegacell) #error
head(Final_EEZ_file)
dim(Final_EEZ_file) #where is the Country Code???
Final_EEZ_file %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
here()
here
library(here)
load("here","scripts","functions","convert_mollweide.R")
#load stocks here
library(here)
load("here","scripts","functions","convert_mollweide.R")
source("here","scripts","functions","convert_mollweide.R")
source(here("scripts","functions","convert_mollweide.R"))
#reference coordinate
CleanCoordmegacell<-readRDS(file = "/Users/ren/Documents/GitHub/FoodProvison_SupportFiles/Code Food Provision MPA/CleanCoordmegacell_mollweide.rds")
head(CleanCoordmegacell)
max(CleanCoordmegacell$lon)
max(CleanCoordmegacell$lat)
dim(CleanCoordmegacell)
CleanCoordmegacell %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
# Path to the Pristine Seas tourism directory on the emLab Google Drive
this_project_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/ps-tourism"
# Load data files necessary for biodiversity model
load(file = file.path(this_project_dir,  "data", "02-processed-data", "bio_model_input.RData"))
head(ocean_df)
ocean_df2 %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster() #ok, great
ocean_df %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster() #ok, great
CleanCoordmegacell<-readRDS(here("data","CleanCoordmegacell_mollweide.rds"))
dim(CleanCoordmegacell)
head(ocean_df) #ok we have lon lat here
dim(ocean_df)
checkme<-AlignCoordinates(CleanCoordmegacell, ocean_df)
head(checkme)
dim(checkme)
highreseezgrid<-read.csv("/Users/ren/Documents/GitHub/FoodProvison_SupportFiles/Code Food Provision MPA/TestFiles/high_res_eez_grid.csv")
res<-0.5
highreseezgrid$CenterLat<-floor(highreseezgrid$lat_bin_center/res)*res+ 0.5*res
highreseezgrid$CenterLong<-floor(highreseezgrid$lon_bin_center/res)*res+ 0.5*res
highreseezgrid<-highreseezgrid %>% dplyr::select(territory_iso3,sovereign_iso3,CenterLat,CenterLong)
colnames(highreseezgrid) <- c("territory","sovereign","lat","lon")
head(highreseezgrid)
#select US only (this is for now only given the urgency of the work)
highreseezgrid %>% filter(sovereign=="USA") #all islands here
mainlandUS<-highreseezgrid %>% filter(sovereign=="USA") #mainland only
#mainlandUS<-highreseezgrid %>% filter(territory=="USA") #mainland only
head(mainlandUS)
dim(mainlandUS)
EEZ_coord<-unique(mainlandUS[c("lat", "lon")])
EEZ_coord
MollweideFile<-ConvertMollweide(EEZ_coord,ocean_df) #using the ConvertMollweide function here
head(MollweideFile)
dim(MollweideFile)
dim(mainlandUS)
dim(EEZ_coord)
EEZ_coord %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
MollweideFile %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
EEZ_coord %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
MollweideFile %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
MollweideFile<-ConvertMollweide(EEZ_coord,CleanCoordmegacell) #using the ConvertMollweide function here
head(MollweideFile)
dim(MollweideFile)
MollweideFile %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
head(ocean_df)
ocean_df %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
MollweideFile<-ConvertMollweide(EEZ_coord,ocean_df) #using the ConvertMollweide function here
head(MollweideFile)
dim(MollweideFile)
MollweideFile %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
MollweideFile %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_tile()
View(MollweideFile)
check_unique_size<- unique(MollweideFile[c("lat", "lon")])
dim(check_unique_size)
MollweideFile %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_point()
MollweideFile %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
Cleanmegacell<-readRDS(file = "/Users/ren/Documents/CODES/FoodProvision/Cleanmegacell.rds")
CleanCoordmegacell<-readRDS(file = "/Users/ren/Documents/CODES/FoodProvision/CleanCoordmegacell.rds")
dim(Cleanmegacell)
dim(CleanCoordmegacell)
CleanCoordmegacell %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
MollweideFile<-ConvertMollweide(CleanCoordmegacell,ocean_df) #using the ConvertMollweide function here
head(MollweideFile)
dim(MollweideFile)
MollweideFile %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
plot(MollweideFile$probability)
head(ocean_df)
checkme <- left_join(ocean_df,MollweideFile,by=c("lon","lat"))
head(checkme)
View(checkme)
dim(checkme)
checkme %>% select(!is.na(probability)) %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
test<-checkme %>% select(!is.na(probability))
test<-checkme %>% select(!is.na("probability"))
test<-checkme %>% select(probability=1)
checkme %>% select(probability=1) %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
checkme %>% select(probability=1) %>% ggplot(aes(x="lon",y="lat",fill=1)) + geom_raster()
test<-checkme %>% select(probability=1)
head(test)
test<-checkme %>% filter(probability=1)
test<-checkme %>% filter(probability==1)
head(test)
checkme %>% filter(probability==1) %>% ggplot(aes(x="lon",y="lat",fill=1)) + geom_raster()
checkme %>% filter(probability==1) %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
checkme %>% filter(probability==1) %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
test<-checkme %>% filter(probability==1) %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
dim(test)
length(test)
test
test<-checkme %>% filter(probability==1)
dim(test)
checkme %>% filter(is.na(probability)) %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
checkme %>% filter(is.na(probability)) %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_tile()
Cleanmegacell<-readRDS(file = "/Users/ren/Documents/CODES/FoodProvision/Cleanmegacell.rds")
CleanCoordmegacell<-readRDS(file = "/Users/ren/Documents/CODES/FoodProvision/CleanCoordmegacell.rds")
dim(Cleanmegacell)
dim(CleanCoordmegacell) #this is not mollweide
CleanCoordmegacell %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
head(CleanCoordmegacell)
min(CleanCoordmegacell$lon)
min(CleanCoordmegacell$lat)
#generate stock distributions/geographic range in mollweide and compatible with Juan's coordinate system
#load stocks here
library(here)
source(here("scripts","functions","convert_mollweide.R"))
##-- Path to the Pristine Seas tourism directory on the emLab Google Drive
this_project_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/ps-tourism"
##-- Load ocean_df file from juan. The code below also loads files necessary for biodiversity model
load(file = file.path(this_project_dir,  "data", "02-processed-data", "bio_model_input.RData"))
head(ocean_df) #ok we have lon lat here
dim(ocean_df)
#plot
ocean_df %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
#load big files
Cleanmegacell<-readRDS(file = "/Users/ren/Documents/CODES/FoodProvision/Cleanmegacell.rds")
CleanCoordmegacell<-readRDS(file = "/Users/ren/Documents/CODES/FoodProvision/CleanCoordmegacell.rds")
dim(Cleanmegacell)
dim(CleanCoordmegacell) #this is not mollweide
CleanCoordmegacell %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
head(CleanCoordmegacell)
min(CleanCoordmegacell$lon)
min(CleanCoordmegacell$lat)
#convert coordinate system to mollweide
CleanCoordmegacell$probability<-1
raster_test <- CleanCoordmegacell %>%
dplyr::select(lon, lat, probability)%>%
raster::rasterFromXYZ(crs = "+proj=longlat +datum=WGS84") %>%
raster::projectRaster(crs = "+proj=moll")
mollfile_1<-raster_test %>%
as.data.frame(xy = T) %>%
filter(!is.na(probability)) %>%
set_names(c("lon", "lat", "probability"))
head(mollfile_1)
min(mollfile_1$lon)
min(mollfile_1$lat)
min(ocean_df$lon)
min(ocean_df$lat)
highreseezgrid2<-left_join(ocean_df,mollfile_1,by=c("lat","lon"))
highreseezgrid2$probability[is.na(highreseezgrid2$probability)] <- 0
sum(highreseezgrid2$probability)>0
#This plots the rejected coordinates... hmm... conversion is wrong
checkme %>% filter(is.na(probability)) %>% ggplot(aes(x=lon,y=lat,fill=1)) + geom_tile()
checkme %>% filter(is.na(probability))
ocean_df %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
juan_coord_megacell<-readRDS(file = "/Users/ren/Desktop/CleanCoordmegacell.rds")
dim(juan_coord_megacell)
checkmerged<-left_join(ocean_df,juan_coord_megacell,by=c("lat","lon"))
juan_coord_megacell<-readRDS(file = "/Users/ren/Desktop/CleanCoordmegacell.rds")
juan_coord_megacell$present<-1
dim(juan_coord_megacell)
#merge with oceandf
checkmerged<-left_join(ocean_df,juan_coord_megacell,by=c("lat","lon"))
dim(checkmerged)
dim(ocean_df)
dim(checkmerged)
View(checkmerged)
min(juan_coord_megacell$lon)
dim(juan_coord_megacell)
head(ocean_df)
Cleanmegacell<-readRDS(file = "/Users/ren/Documents/CODES/FoodProvision/Cleanmegacell.rds")
CleanCoordmegacell<-readRDS(file = "/Users/ren/Documents/CODES/FoodProvision/CleanCoordmegacell.rds")
dim(Cleanmegacell)
dim(juan_coord_megacell)
ocean_df<-add_rownames(ocean_df, var = "rowname") %>% as.data.frame()
ocean_df2<-ocean_df
head(ocean_df)
ocean_df2<-add_rownames(ocean_df, var = "rowname") %>% as.data.frame()
head(ocean_df2)
#generate stock distributions/geographic range in mollweide and compatible with Juan's coordinate system
#load stocks here
library(here)
source(here("scripts","functions","convert_mollweide.R"))
##-- Path to the Pristine Seas tourism directory on the emLab Google Drive
this_project_dir <- "/Volumes/GoogleDrive/Shared drives/emlab/projects/current-projects/ps-tourism"
##-- Load ocean_df file from juan. The code below also loads files necessary for biodiversity model
load(file = file.path(this_project_dir,  "data", "02-processed-data", "bio_model_input.RData"))
head(ocean_df) #ok we have lon lat here
dim(ocean_df)
#plot
ocean_df %>%  ggplot(aes(x=lon,y=lat,fill=1)) + geom_raster()
##check distance here
ocean_df2<-add_rownames(ocean_df, var = "rowname") %>% as.data.frame()
head(ocean_df2)
# promote the input lists to SpatialPointsDataFrames
coordinates(ocean_df2) <- c("lon", "lat")
minDistVec <- vector(mode = "numeric",length = nrow(ocean_df2))
dim(minDistVec)
minDistVec
i <- 1
distVec <- spDistsN1(ocean_df2,ocean_df2[i,],longlat = FALSE)
distVec
dim(distVec)
length(distVec)
dim(ocean_df2)
i <- 1
distVec <- spDistsN1(ocean_df2,ocean_df2[i,],longlat = FALSE)
ocean_df2$dist1 <- distVec
#plot
ocean_df %>%  ggplot(aes(x=lon,y=lat,fill=dist1)) + geom_raster()
ocean_df2 %>%  ggplot(aes(x=lon,y=lat,fill=dist1)) + geom_raster()
data.frame(ocean_df2) %>%  ggplot(aes(x=lon,y=lat,fill=dist1)) + geom_raster()
i <- 1000
distVec <- spDistsN1(ocean_df2,ocean_df2[i,],longlat = FALSE)
ocean_df2$dist1 <- distVec
#plot
data.frame(ocean_df2) %>%  ggplot(aes(x=lon,y=lat,fill=dist1)) + geom_raster()
i <- 100000
distVec <- spDistsN1(ocean_df2,ocean_df2[i,],longlat = FALSE)
ocean_df2$dist1 <- distVec
#plot
data.frame(ocean_df2) %>%  ggplot(aes(x=lon,y=lat,fill=dist1)) + geom_raster()
i <- 50000
distVec <- spDistsN1(ocean_df2,ocean_df2[i,],longlat = FALSE)
ocean_df2$dist1 <- distVec
#plot
data.frame(ocean_df2) %>%  ggplot(aes(x=lon,y=lat,fill=dist1)) + geom_raster()
distVec
checkorder<-distVec[order(distVec),]
distVec <- spDistsN1(ocean_df2,ocean_df2[i,],longlat = FALSE)
checkorder<-distVec[order(distVec),]
distVec
checkorder<-order(distVec)
checkorder
order(distVec)
checkorder<-sort(distVec)
checkorder
distVec
min(distVec)
which.min(distVec)
distVec[50000]
distVec[50001]
ocean_df %>% mutate(distVec=distVec) %>% head()
ocean_df %>% mutate(distVec=distVec) %>% filter(distVec<=1000000) %>% head()
ocean_df %>% mutate(distVec=distVec) %>% filter(distVec<=1000000)
ocean_df %>% mutate(distVec=distVec) %>% filter(distVec<=1000000) %>% ggplot(aes(x=lon,y=lat,fill=distVec)) + geom_raster()
i <- 138748
distVec <- spDistsN1(ocean_df2,ocean_df2[i,],longlat = FALSE)
ocean_df %>% mutate(distVec=distVec) %>% filter(distVec<=1000000) %>% ggplot(aes(x=lon,y=lat,fill=distVec)) + geom_raster()
i <- 138748
distVec <- spDistsN1(ocean_df2,ocean_df2[i,],longlat = FALSE)
ocean_df %>% mutate(distVec=distVec) %>% filter(distVec<=10000000) %>% ggplot(aes(x=lon,y=lat,fill=distVec)) + geom_raster()
i <- 15000
distVec <- spDistsN1(ocean_df2,ocean_df2[i,],longlat = FALSE)
ocean_df %>% mutate(distVec=distVec) %>% filter(distVec<=10000000) %>% ggplot(aes(x=lon,y=lat,fill=distVec)) + geom_raster()
